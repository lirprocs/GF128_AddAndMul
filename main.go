package main

import (
	"fmt"
	"github.com/lirprocs/Kuznyechik/KuznEncrypt"
)

func bytesToUint64(b []byte) (uint64, uint64) {
	var high, low uint64
	for i := 0; i < 8; i++ {
		high = (high << 8) | uint64(b[i])
		low = (low << 8) | uint64(b[i+8])
	}
	return high, low
}

func uint64ToBytes(high, low uint64) [16]byte {
	var b [16]byte
	for i := 0; i < 8; i++ {
		b[i] = byte(high >> (56 - 8*i))
		b[i+8] = byte(low >> (56 - 8*i))
	}
	return b
}

func multiplicationGF128(a, b []byte) []byte {
	var x [16]byte
	var aLow, aHigh = bytesToUint64(a[:])
	var bLow, bHigh = bytesToUint64(b[:])
	var xHigh, xLow uint64
	pow2_63 := uint64(0x8000000000000000) // 2^63
	var bitFlag uint64

	for bHigh != 0 || bLow != 0 {
		if bHigh&1 != 0 {
			xLow ^= aLow
			xHigh ^= aHigh
		}

		bitFlag = aHigh & pow2_63
		aHigh = (aHigh << 1) ^ (func() uint64 {
			if aLow&pow2_63 != 0 {
				return 0x87
			}
			return 0x00
		}())
		aLow = (aLow << 1) | (bitFlag >> 63)

		bitFlag = bLow & 0x01
		bHigh = (bHigh >> 1) | (bitFlag << 63)
		bLow = bLow >> 1
	}

	x = uint64ToBytes(xLow, xHigh)
	return x[:]
}

func gfAdd(a, b []byte) []byte {
	ans := make([]byte, len(a))
	for k, v := range a {
		ans[k] = v ^ b[k]
	}
	return ans
}

func main() {
	//h := 3
	//q := 5
	K := [32]byte{0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}

	H := [][]byte{
		{0x8D, 0xB1, 0x87, 0xD6, 0x53, 0x83, 0x0E, 0xA4, 0xBC, 0x44, 0x64, 0x76, 0x95, 0x2C, 0x30, 0x0B},
		{0x7A, 0x24, 0xF7, 0x26, 0x30, 0xE3, 0x76, 0x37, 0x21, 0xC8, 0xF3, 0xCD, 0xB1, 0xDA, 0x0E, 0x31},
		{0x44, 0x11, 0x96, 0x21, 0x17, 0xD2, 0x06, 0x35, 0xC5, 0x25, 0xE0, 0xA2, 0x4D, 0xB4, 0xB9, 0x0A},
		{0xD8, 0xC9, 0x62, 0x3C, 0x4D, 0xBF, 0xE8, 0x14, 0xCE, 0x7C, 0x1C, 0x0C, 0xEA, 0xA9, 0x59, 0xDB},
		{0xA5, 0xE1, 0xF1, 0x95, 0x33, 0x3E, 0x14, 0x82, 0x96, 0x99, 0x31, 0xBF, 0xBE, 0x6D, 0xFD, 0x43},
		{0xB4, 0xCA, 0x80, 0x8C, 0xAC, 0xCF, 0xB3, 0xF9, 0x17, 0x24, 0xE4, 0x8A, 0x2C, 0x7E, 0xE9, 0xD2},
		{0x72, 0x90, 0x8F, 0xC0, 0x74, 0xE4, 0x69, 0xE8, 0x90, 0x1B, 0xD1, 0x88, 0xEA, 0x91, 0xC3, 0x31},
		{0x23, 0xCA, 0x27, 0x15, 0xB0, 0x2C, 0x68, 0x31, 0x3B, 0xFD, 0xAC, 0xB3, 0x9E, 0x4D, 0x0F, 0xB8},
		{0xBC, 0xBC, 0xE6, 0xC4, 0x1A, 0xA3, 0x55, 0xA4, 0x14, 0x88, 0x62, 0xBF, 0x64, 0xBD, 0x83, 0x0D},
	}

	A := [][]byte{
		{0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
		{0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03},
		{0xEA, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	}

	C := [][]byte{
		{0xA9, 0x75, 0x7B, 0x81, 0x47, 0x95, 0x6E, 0x90, 0x55, 0xB8, 0xA3, 0x3D, 0xE8, 0x9F, 0x42, 0xFC},
		{0x80, 0x75, 0xD2, 0x21, 0x2B, 0xF9, 0xFD, 0x5B, 0xD3, 0xF7, 0x06, 0x9A, 0xAD, 0xC1, 0x6B, 0x39},
		{0x49, 0x7A, 0xB1, 0x59, 0x15, 0xA6, 0xBA, 0x85, 0x93, 0x6B, 0x5D, 0x0E, 0xA9, 0xF6, 0x85, 0x1C},
		{0xC6, 0x0C, 0x14, 0xD4, 0xD3, 0xF8, 0x83, 0xD0, 0xAB, 0x94, 0x42, 0x06, 0x95, 0xC7, 0x6D, 0xEB},
		{0x2C, 0x75, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	}

	lengths := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x18}

	//----------------------------------------------------
	res := multiplicationGF128(H[0], A[0])
	fmt.Printf("H0xA0: %X\n", res)
	x := multiplicationGF128(H[1], A[1])
	fmt.Printf("H1xA1: %X\n", x)
	res = gfAdd(res, x)
	//fmt.Printf("H0xA0+H1xA1: %X\n", res)

	x = multiplicationGF128(H[2], A[2])
	fmt.Printf("H2xA2: %X\n", x)
	res = gfAdd(res, x)
	fmt.Printf("H0xA0+H1xA1+H2xA2: %X\n", res)
	//fmt.Printf("O: %X\n", res)
	//----------------------------------------------------
	res1 := multiplicationGF128(H[3], C[0])
	fmt.Printf("H3xC0: %X\n", res1)
	x1 := multiplicationGF128(H[4], C[1])
	fmt.Printf("H4xC1: %X\n", x1)
	res1 = gfAdd(res1, x1)
	//fmt.Printf("H3xC0+H4xC1: %X\n", res1)
	x1 = multiplicationGF128(H[5], C[2])
	fmt.Printf("H5xC2: %X\n", x1)
	res1 = gfAdd(res1, x1)
	//fmt.Printf("H3xC0+H4xC1+H5xC2: %X\n", res1)
	x1 = multiplicationGF128(H[6], C[3])
	fmt.Printf("H6xC3: %X\n", x1)
	res1 = gfAdd(res1, x1)
	//fmt.Printf("H3xC0+H4xC1+H5xC2+H6xC3: %X\n", res1)
	x1 = multiplicationGF128(H[7], C[4])
	fmt.Printf("H7xC4: %X\n", x1)
	res1 = gfAdd(res1, x1)

	fmt.Printf("H3xC0+H4xC1+H5xC2+H6xC3+H7xC4: %X\n", res1)
	//----------------------------------------------------
	res2 := multiplicationGF128(H[8], lengths)
	fmt.Printf("H8xLenAC: %X\n", res2)
	//----------------------------------------------------
	res3 := gfAdd(gfAdd(res, res1), res2)
	fmt.Printf("result: %X\n", res3)
	//----------------------------------------------------
	var data [16]byte
	copy(data[:], res3[:])
	r := KuznEncrypt.Encrypt(data, K)
	fmt.Printf("T: %X\n", r)

	//result := [16]byte{0xFD, 0x47, 0x5B, 0xCA, 0x28, 0x79, 0x55, 0x9B, 0x79, 0xF1, 0xF3, 0x57, 0xF2, 0xC3, 0x6E, 0x28}
	//a1 := [2]uint64{0x8DB187D653830EA4, 0xBC446476952C300B}
	//b1 := [2]uint64{0x0202020202020202, 0x0101010101010101}
	//var x1 [2]uint64

	//multiplicationGF1281(&a1, &b1, &x1)
	//fmt.Printf("Result: %016x %016x\n", x1[1], x1[0])
}
